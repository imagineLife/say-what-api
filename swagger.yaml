swagger: "2.0"
info:
  description: "[A link to google](google.com) `some inline-text with backticks`Trying this This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "SayWhat?!"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ericjlaursen@gmail.com"
  license:
    name: "LicenseName?!"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api"
tags:
- name: "speech"
  description: "Operations about speech text"
  externalDocs:
    description: "ExternalDocs description"
    url: "http://externalDocsURL.com"
schemes:
- "https"
- "http"
paths:
  "/speech":
    post:
      tags:
      - "speech"
      summary: "Create speech"
      description: "This can only be done by the logged in user."
      operationId: "createSpeech"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created speech object"
        required: true
        schema:
          $ref: "#/definitions/Speech"
      responses:
        default:
          description: "successful operation"
  "/speeches/default":
    get:
      tags:
      - "speech"
      summary: "Get default speech"
      description: "Get the 'default speech'"
      operationId: "get default speech"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
  "/speeches/text/default":
    get:
      tags:
      - "speech"
      summary: "Get text of default speech"
      description: "Get the 'default speech' text"
      operationId: "get default speech text"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
  "/speeches/speechList":
    get:
      tags:
      - "speech"
      summary: "Get list of available speeches"
      description: "Get list of speeched"
      operationId: "getSpeechList"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
      security:
        - jwt_auth: []
  "/speeches/:id":
    get:
      tags:
      - "speech"
      summary: "Get a speech By Speech ID"
      description: "This can only be done by the logged in user."
      operationId: "getSpeechById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "speech ID as parameter"
        required: true
        schema:
          $ref: "#/definitions/Speech"
      responses:
        default:
          description: "successful operation"
      security:
        - jwt_auth: []
  /users/register:
    post:
      tags:
      - "user"
      summary: "Registers a new user"
      description: ""
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The register post object"
        required: true
        schema:
          type: "object"
          required:
            - username
            - password
            - email
          properties:
            username:
              type: "string"
            password:
              type: "string"
            firstName:
              type: "string"
            lastName:
              type: "string"
            email:
              type: "string"
      responses:
        201:
          description: "User registered"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "internal server error"
        400:
          description: "Invalid username/password supplied"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /auth/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The user name for login"
        required: true
        schema:
          type: "object"
          required:
            - username
            - password
          properties:
            username:
              type: "string"
            password:
              type: "string"
      responses:
        200:
          description: "successful login"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username/password supplied"
      security:
        - basic_auth: []
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  basic_auth:
    type: "basic"
  jwt_auth:
    type: "apiKey"
    name: "Bearer"
    in: "header"
definitions:
  Speech:
    type: "object"
    required: 
      - text
      - orator
      - dateGiven
    properties: 
      id:
        type: "integer"
        format: "int64"
      text:
        type: "string"
      orator:
        type: "string"
      dateGiven:
        type: "string"
        example: "2018-05-05"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      __v:
        type: "integer"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      requests:
        type: "array"
        items: 
          type: "string"
      authToken:
        type: "string"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"